import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from IPython.display import display

class PriceSimulator:
    def __init__(self):
        """Initialize the price simulator with default restaurant menu items data."""
        # Generate sample data for this task
        menu_items = ["Burger", "Pizza", "Pasta", "Salad", "Dessert"] # sample restaurant menu items
        current_prices = [12.99, 15.99, 13.99, 9.99, 7.99] # sample base prices
        costs = [4.55, 4.80, 3.49, 1.99, 1.20] # Actual costs of making the items (food cost, labor, etc.)
        baseline_demand = [150, 120, 100, 80, 60] # Sample baseline weekly demand
        price_elasticity = [-1.3, -0.9, -1.1, -0.8, -0.6] # Sample price elasticity (negative values: higher price = lower demand)
        
        # Create dataframe
        menu_df = pd.DataFrame({'Item': menu_items, 'Current Price': current_prices,
            'Cost': costs, 'Baseline Demand': baseline_demand, 'Price Elasticity': price_elasticity})
        
        # Calculate current metrics
        menu_df['Current Revenue'] = menu_df['Current Price'] * menu_df['Baseline Demand']
        menu_df['Current Profit'] = (menu_df['Current Price'] - menu_df['Cost']) * menu_df['Baseline Demand']
        menu_df['Current Margin'] = menu_df['Current Profit'] / menu_df['Current Revenue'] * 100
        self.menu_data = menu_df
    
    def simulate_price_change(self, price_changes=None):
        """
        Simulate impact of price changes on demand, revenue, and profit.
        
        Parameters:
        price_changes (dict): Dictionary with menu items as keys and new prices as values
        Example: {'Burger': 13.99, 'Pizza': 16.99}
        
        Returns:
        DataFrame: Results of the simulation with comparative metrics
        """
        if price_changes is None:
            price_changes = {}
            
        sim_df = self.menu_data.copy() # Create a copy of the original data to encapsulate it, store as simulation dataframe
        
        # Track totals of all items for comparison
        current_total_revenue = sim_df['Current Revenue'].sum()
        current_total_profit = sim_df['Current Profit'].sum()
        
        # Apply price changes and calculate projected metrics
        for item, new_price in price_changes.items():
            if item in sim_df['Item'].values:
                itemIndex = sim_df[sim_df['Item'] == item].index[0] # Find the row index
                
                # Calculate percentage price change
                old_price = sim_df.loc[itemIndex, 'Current Price']
                price_pct_change = (new_price - old_price) / old_price * 100
                
                # Calculate new demand based on price elasticity
                elasticity = sim_df.loc[itemIndex, 'Price Elasticity']
                demand_pct_change = price_pct_change * elasticity
                projected_demand = sim_df.loc[itemIndex, 'Baseline Demand'] * (1 + demand_pct_change/100)
                projected_demand = max(0, projected_demand)  # Ensure demand doesn't go negative
                
                # Update the dataframe
                sim_df.loc[itemIndex, 'New Price'] = new_price
                sim_df.loc[itemIndex, 'Projected Demand'] = projected_demand
                sim_df.loc[itemIndex, 'Projected Revenue'] = new_price * projected_demand
                sim_df.loc[itemIndex, 'Projected Profit'] = (new_price - sim_df.loc[itemIndex, 'Cost']) * projected_demand
                sim_df.loc[itemIndex, 'Demand Change (%)'] = (projected_demand - sim_df.loc[itemIndex, 'Baseline Demand']) / sim_df.loc[itemIndex, 'Baseline Demand'] * 100
        
        # Fill in unchanged items
        unchanged_items = ~sim_df['Item'].isin(price_changes.keys())
        sim_df.loc[unchanged_items, 'New Price'] = sim_df.loc[unchanged_items, 'Current Price']
        sim_df.loc[unchanged_items, 'Projected Demand'] = sim_df.loc[unchanged_items, 'Baseline Demand']
        sim_df.loc[unchanged_items, 'Projected Revenue'] = sim_df.loc[unchanged_items, 'Current Revenue']
        sim_df.loc[unchanged_items, 'Projected Profit'] = sim_df.loc[unchanged_items, 'Current Profit']
        sim_df.loc[unchanged_items, 'Demand Change (%)'] = 0
        
        # Calculate percentage changes
        sim_df['Revenue Change (%)'] = (sim_df['Projected Revenue'] - sim_df['Current Revenue']) / sim_df['Current Revenue'] * 100
        sim_df['Profit Change (%)'] = (sim_df['Projected Profit'] - sim_df['Current Profit']) / sim_df['Current Profit'] * 100
        sim_df['Projected Margin'] = sim_df['Projected Profit'] / sim_df['Projected Revenue'] * 100
        sim_df['Margin Change (%)'] = sim_df['Projected Margin'] - sim_df['Current Margin']
        
        # Calculate totals for comparison
        projected_total_revenue = sim_df['Projected Revenue'].sum()
        projected_total_profit = sim_df['Projected Profit'].sum()
        
        # Summary metrics
        self.summary = {
            'Current Total Revenue': current_total_revenue,
            'Projected Total Revenue': projected_total_revenue,
            'Revenue Change (%)': (projected_total_revenue - current_total_revenue) / current_total_revenue * 100,
            'Current Total Profit': current_total_profit,
            'Projected Total Profit': projected_total_profit,
            'Profit Change (%)': (projected_total_profit - current_total_profit) / current_total_profit * 100
        }
        
        return sim_df
    
    def display_results(self, sim_df):
        """Display simulation results in formatted tables and visualizations."""
        pd.set_option('display.float_format', '${:.2f}'.format)
        
        # Create a nice table for the menu items
        display_df = sim_df[['Item', 'Current Price', 'New Price', 'Baseline Demand', 'Projected Demand',
                        'Demand Change (%)', 'Current Revenue', 'Projected Revenue', 'Revenue Change (%)',
                        'Current Profit', 'Projected Profit', 'Profit Change (%)', 'Current Margin', 'Projected Margin']]
        
        # Format the table
        formatted_df = display_df.copy()
        for col in ['Current Price', 'New Price']:
            formatted_df[col] = formatted_df[col].apply(lambda x: f"${x:.2f}")
        for col in ['Demand Change (%)', 'Revenue Change (%)', 'Profit Change (%)', 'Current Margin', 'Projected Margin']:
            formatted_df[col] = formatted_df[col].apply(lambda x: f"{x:.1f}%")
        for col in ['Current Revenue', 'Projected Revenue', 'Current Profit', 'Projected Profit']:
            formatted_df[col] = formatted_df[col].apply(lambda x: f"${x:.2f}")
        print("\n=== MENU ITEM ANALYSIS ===")
        display(formatted_df)
        
        # Summary table
        summary_data = {'Metric': ['Total Revenue', 'Total Profit'],
            'Current': [f"${self.summary['Current Total Revenue']:.2f}", f"${self.summary['Current Total Profit']:.2f}"],
            'Projected': [f"${self.summary['Projected Total Revenue']:.2f}", f"${self.summary['Projected Total Profit']:.2f}"],
            'Change': [f"{self.summary['Revenue Change (%)']:.1f}%", f"{self.summary['Profit Change (%)']:.1f}%"]
        }
        summary_df = pd.DataFrame(summary_data)
        print("\n=== SUMMARY ===")
        display(summary_df)
        
        self._plot_comparison(sim_df) # Create graphs too
        
    def _plot_comparison(self, sim_df):
        """Create comparative visualizations of the simulation results."""
        plt.figure(figsize=(12, 8))  # Increased figure size to accommodate external legends
        
        # Create a dataframe in the right format for plotting
        revenue_data = []
        profit_data = []
        for item in sim_df['Item'].unique():
            item_data = sim_df[sim_df['Item'] == item]
            revenue_data.append({'Item': item, 'Current': item_data['Current Revenue'].values[0],
                'Projected': item_data['Projected Revenue'].values[0]})
            profit_data.append({'Item': item, 'Current': item_data['Current Profit'].values[0],
                'Projected': item_data['Projected Profit'].values[0]})
        revenue_data = pd.DataFrame(revenue_data)
        profit_data = pd.DataFrame(profit_data)
        
        # Transpose the data for plotting
        revenue_plot_data = revenue_data.set_index('Item').T
        profit_plot_data = profit_data.set_index('Item').T
        
        # Use different markers for different items
        markers = ['o', 's', '^', 'D', '*', 'p', 'h', 'v']
        
        # Create the revenue scatter plot
        ax1 = plt.subplot(2, 2, 1)
        for i, column in enumerate(revenue_plot_data.columns):
            marker = markers[i % len(markers)]  # Cycle through markers if more items than markers
            ax1.scatter(revenue_plot_data.index, revenue_plot_data[column], s=100, marker=marker, label=column)
            ax1.plot(revenue_plot_data.index, revenue_plot_data[column], alpha=0.3, linestyle='--') # Connecting lines
        
        ax1.set_title('Revenue Trend')
        ax1.set_ylabel('Revenue ($)')
        ax1.grid(True, linestyle='--', alpha=0.7)
        
        # Create the profit scatter plot
        ax2 = plt.subplot(2, 2, 2)
        for i, column in enumerate(profit_plot_data.columns):
            marker = markers[i % len(markers)]  # Cycle through markers if more items than markers
            ax2.scatter(profit_plot_data.index, profit_plot_data[column], s=100, marker=marker, label=column)
            ax2.plot(profit_plot_data.index, profit_plot_data[column], alpha=0.3, linestyle='--') # Connecting lines
        
        ax2.set_title('Profit Trend')
        ax2.set_ylabel('Profit ($)')
        ax2.grid(True, linestyle='--', alpha=0.7)
        
        # Place legend outside the plot area to the right
        ax2.legend(title='Menu Items', loc='center left', bbox_to_anchor=(1.0, 0.5))
        
        # Revenue vs. Profit % Change
        ax3 = plt.subplot(2, 2, 3)
        x = sim_df['Revenue Change (%)']
        y = sim_df['Profit Change (%)']
        for i, column in enumerate(profit_plot_data.columns):
            marker = markers[i % len(markers)]  # Cycle through markers if more items than markers
            ax3.scatter(revenue_plot_data[column], profit_plot_data[column], s=100, marker=marker, label=column)
            ax3.plot(revenue_plot_data[column], profit_plot_data[column], alpha=0.3, linestyle='--') # Connecting lines
        
        ax3.axhline(y=0, color='r', linestyle='-', alpha=0.3)
        ax3.axvline(x=0, color='r', linestyle='-', alpha=0.3)
        ax3.set_xlabel('Revenue Change (%)')
        ax3.set_ylabel('Profit Change (%)')
        ax3.grid(True, linestyle='--', alpha=0.7)
        ax3.set_title('Revenue vs. Profit Change')
        
        plt.tight_layout()
        plt.subplots_adjust(right=0.85) # Add padding to the right side to make room for legends
        plt.show()
    
    def find_optimal_prices(self, items=None, price_range=0.3, steps=10):
        """
        Find optimal prices for maximizing profit or revenue.
        
        Parameters:
        items (list): List of menu items to optimize (None for all)
        price_range (float): Price range to explore as percentage of current price (default: 30%)
        steps (int): Number of price points to test within the range
        
        Returns:
        DataFrame: Optimal prices for each item
        """
        if items is None:
            items = self.menu_data['Item'].tolist()
            
        results = []
        
        for item in items:
            item_data = self.menu_data[self.menu_data['Item'] == item].iloc[0]
            current_price = item_data['Current Price']
            
            # Price points to test
            min_price = current_price * (1 - price_range)
            max_price = current_price * (1 + price_range)
            price_points = np.linspace(min_price, max_price, steps)
            
            # Test each price point
            price_results = []
            for price in price_points:
                # Simulate with just this one price change
                sim_result = self.simulate_price_change({item: price})
                item_result = sim_result[sim_result['Item'] == item].iloc[0]
                
                price_results.append({'price': price, 'demand': item_result['Projected Demand'],
                    'revenue': item_result['Projected Revenue'], 'profit': item_result['Projected Profit'],
                    'margin': item_result['Projected Margin']})
            
            price_df = pd.DataFrame(price_results) # Convert to DataFrame
            
            # Find optimal points
            max_revenue_price = price_df.loc[price_df['revenue'].idxmax(), 'price']
            max_profit_price = price_df.loc[price_df['profit'].idxmax(), 'price']
            max_margin_price = price_df.loc[price_df['margin'].idxmax(), 'price']
            
            results.append({'Item': item, 'Current Price': current_price, 'max_revenue_price': max_revenue_price,
                'max_profit_price': max_profit_price, 'max_margin_price': max_margin_price,
                'revenue_price_diff': (max_revenue_price - current_price) / current_price * 100,
                'profit_price_diff': (max_profit_price - current_price) / current_price * 100,
                'margin_price_diff': (max_margin_price - current_price) / current_price * 100})
        
        results_df = pd.DataFrame(results)
        
        # Format for display
        display_df = results_df.copy()
        for col in ['Current Price', 'max_revenue_price', 'max_profit_price', 'max_margin_price']:
            display_df[col] = display_df[col].apply(lambda x: f"${x:.2f}")
        for col in ['revenue_price_diff', 'profit_price_diff', 'margin_price_diff']:
            display_df[col] = display_df[col].apply(lambda x: f"{x:.1f}%")
            
        print("\n=== PRICE OPTIMIZATION ANALYSIS ===")
        display(display_df)
        
        return results_df

# Example usage of the simulator
def demo_price_simulator():
    # Initialize the simulator
    simulator = PriceSimulator()
    
    # Display original menu data
    print("=== ORIGINAL MENU DATA ===")
    display(simulator.menu_data)
    
    # Example 1: Test specific price changes
    print("\n\n=== SIMULATION 1: SPECIFIC PRICE CHANGES ===")
    price_changes = {'Burger': 14.99,  # Increase burger price
        'Salad': 8.99}     # Decrease salad price
    results = simulator.simulate_price_change(price_changes)
    simulator.display_results(results)
    
    # Example 2: Find optimal prices
    print("\n\n=== SIMULATION 2: PRICE OPTIMIZATION ===")
    optimal_prices = simulator.find_optimal_prices(price_range=0.3, steps=20)
    
    # Example 3: Apply optimal profit prices and see results
    print("\n\n=== SIMULATION 3: APPLYING OPTIMAL PROFIT PRICES ===")
    optimal_profit_changes = {
        item: row['max_profit_price'] 
        for item, row in zip(optimal_prices['Item'], optimal_prices.to_dict('records'))
    }
    optimal_results = simulator.simulate_price_change(optimal_profit_changes)
    simulator.display_results(optimal_results)

# Run the demo if executed directly
if __name__ == "__main__":
    demo_price_simulator()